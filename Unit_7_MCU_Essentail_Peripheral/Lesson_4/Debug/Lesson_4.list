
Lesson_4.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009fc  080009fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  4 .ARM          00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a08  08000a10  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  08000a10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000a10  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c5d  00000000  00000000  00010a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000391  00000000  00000000  00011696  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007c8  00000000  00000000  00011a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000148  00000000  00000000  000121f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00012338  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001600  00000000  00000000  00012448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000f26  00000000  00000000  00013a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000064eb  00000000  00000000  0001496e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001ae59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000414  00000000  00000000  0001aed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009e4 	.word	0x080009e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009e4 	.word	0x080009e4

08000170 <Clock_Init>:
#include "Stm32f103c6_EXTI_Driver.h"
#include "Stm32f103c6_GPIO_Driver.h"

int flag = 0;
void Clock_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Init GPIOs clock
	E_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_Init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_Init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	E_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_Init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_Init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

	//Init AFIO clock
	E_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_Init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_Init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <EXTI9_Callback>:

void EXTI9_Callback()
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	int DoesItWork;
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <main>:

int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
	Clock_Init();
 80001b6:	f7ff ffdb 	bl	8000170 <Clock_Init>

	EXTI_PinConfig EXTI_CFG;

	EXTI_CFG.EXTI_Pin = EXTI9pB9;
 80001ba:	4a08      	ldr	r2, [pc, #32]	; (80001dc <main+0x2c>)
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	ca07      	ldmia	r2, {r0, r1, r2}
 80001c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 80001c4:	2301      	movs	r3, #1
 80001c6:	747b      	strb	r3, [r7, #17]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <main+0x30>)
 80001ca:	617b      	str	r3, [r7, #20]
	EXTI_CFG.Trigger = EXTI_Trigger_RISING;
 80001cc:	2300      	movs	r3, #0
 80001ce:	743b      	strb	r3, [r7, #16]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);  //Init my peripherals
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 f9e8 	bl	80005a8 <MCAL_EXTI_GPIO_Init>

	while (1); //Infinite loops
 80001d8:	e7fe      	b.n	80001d8 <main+0x28>
 80001da:	bf00      	nop
 80001dc:	080009fc 	.word	0x080009fc
 80001e0:	080001a5 	.word	0x080001a5

080001e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001e4:	480d      	ldr	r0, [pc, #52]	; (800021c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ec:	480c      	ldr	r0, [pc, #48]	; (8000220 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ee:	490d      	ldr	r1, [pc, #52]	; (8000224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <LoopForever+0xe>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f4:	e002      	b.n	80001fc <LoopCopyDataInit>

080001f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001fa:	3304      	adds	r3, #4

080001fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000200:	d3f9      	bcc.n	80001f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000202:	4a0a      	ldr	r2, [pc, #40]	; (800022c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000204:	4c0a      	ldr	r4, [pc, #40]	; (8000230 <LoopForever+0x16>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000208:	e001      	b.n	800020e <LoopFillZerobss>

0800020a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800020a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800020c:	3204      	adds	r2, #4

0800020e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800020e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000210:	d3fb      	bcc.n	800020a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000212:	f000 fbc3 	bl	800099c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000216:	f7ff ffcb 	bl	80001b0 <main>

0800021a <LoopForever>:

LoopForever:
    b LoopForever
 800021a:	e7fe      	b.n	800021a <LoopForever>
  ldr   r0, =_estack
 800021c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000224:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000228:	08000a10 	.word	0x08000a10
  ldr r2, =_sbss
 800022c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000230:	20000058 	.word	0x20000058

08000234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000234:	e7fe      	b.n	8000234 <ADC1_2_IRQHandler>
	...

08000238 <Enable_Nvic>:
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*
//             Generic Function
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*

void Enable_Nvic(uint16_t IRQ_Num)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	80fb      	strh	r3, [r7, #6]
	switch (IRQ_Num)
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d854      	bhi.n	80002f2 <Enable_Nvic+0xba>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <Enable_Nvic+0x18>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	08000291 	.word	0x08000291
 8000254:	0800029f 	.word	0x0800029f
 8000258:	080002ad 	.word	0x080002ad
 800025c:	080002bb 	.word	0x080002bb
 8000260:	080002c9 	.word	0x080002c9
 8000264:	080002d7 	.word	0x080002d7
 8000268:	080002d7 	.word	0x080002d7
 800026c:	080002d7 	.word	0x080002d7
 8000270:	080002d7 	.word	0x080002d7
 8000274:	080002d7 	.word	0x080002d7
 8000278:	080002e5 	.word	0x080002e5
 800027c:	080002e5 	.word	0x080002e5
 8000280:	080002e5 	.word	0x080002e5
 8000284:	080002e5 	.word	0x080002e5
 8000288:	080002e5 	.word	0x080002e5
 800028c:	080002e5 	.word	0x080002e5
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000290:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <Enable_Nvic+0xc4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a19      	ldr	r2, [pc, #100]	; (80002fc <Enable_Nvic+0xc4>)
 8000296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029a:	6013      	str	r3, [r2, #0]
		break;
 800029c:	e029      	b.n	80002f2 <Enable_Nvic+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <Enable_Nvic+0xc4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a16      	ldr	r2, [pc, #88]	; (80002fc <Enable_Nvic+0xc4>)
 80002a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a8:	6013      	str	r3, [r2, #0]
		break;
 80002aa:	e022      	b.n	80002f2 <Enable_Nvic+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <Enable_Nvic+0xc4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a12      	ldr	r2, [pc, #72]	; (80002fc <Enable_Nvic+0xc4>)
 80002b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b6:	6013      	str	r3, [r2, #0]
		break;
 80002b8:	e01b      	b.n	80002f2 <Enable_Nvic+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <Enable_Nvic+0xc4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <Enable_Nvic+0xc4>)
 80002c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c4:	6013      	str	r3, [r2, #0]
		break;
 80002c6:	e014      	b.n	80002f2 <Enable_Nvic+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <Enable_Nvic+0xc4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <Enable_Nvic+0xc4>)
 80002ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d2:	6013      	str	r3, [r2, #0]
		break;
 80002d4:	e00d      	b.n	80002f2 <Enable_Nvic+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <Enable_Nvic+0xc4>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a08      	ldr	r2, [pc, #32]	; (80002fc <Enable_Nvic+0xc4>)
 80002dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e0:	6013      	str	r3, [r2, #0]
		break;
 80002e2:	e006      	b.n	80002f2 <Enable_Nvic+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <Enable_Nvic+0xc8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <Enable_Nvic+0xc8>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6013      	str	r3, [r2, #0]
		break;
 80002f0:	bf00      	nop

	}
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000e104 	.word	0xe000e104

08000304 <Disable_Nvic>:

void Disable_Nvic(uint16_t IRQ_Num)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	80fb      	strh	r3, [r7, #6]
	switch (IRQ_Num) {
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	2b0f      	cmp	r3, #15
 8000312:	d854      	bhi.n	80003be <Disable_Nvic+0xba>
 8000314:	a201      	add	r2, pc, #4	; (adr r2, 800031c <Disable_Nvic+0x18>)
 8000316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031a:	bf00      	nop
 800031c:	0800035d 	.word	0x0800035d
 8000320:	0800036b 	.word	0x0800036b
 8000324:	08000379 	.word	0x08000379
 8000328:	08000387 	.word	0x08000387
 800032c:	08000395 	.word	0x08000395
 8000330:	080003a3 	.word	0x080003a3
 8000334:	080003a3 	.word	0x080003a3
 8000338:	080003a3 	.word	0x080003a3
 800033c:	080003a3 	.word	0x080003a3
 8000340:	080003a3 	.word	0x080003a3
 8000344:	080003b1 	.word	0x080003b1
 8000348:	080003b1 	.word	0x080003b1
 800034c:	080003b1 	.word	0x080003b1
 8000350:	080003b1 	.word	0x080003b1
 8000354:	080003b1 	.word	0x080003b1
 8000358:	080003b1 	.word	0x080003b1
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <Disable_Nvic+0xc4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a19      	ldr	r2, [pc, #100]	; (80003c8 <Disable_Nvic+0xc4>)
 8000362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000366:	6013      	str	r3, [r2, #0]
		break;
 8000368:	e029      	b.n	80003be <Disable_Nvic+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <Disable_Nvic+0xc4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <Disable_Nvic+0xc4>)
 8000370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000374:	6013      	str	r3, [r2, #0]
		break;
 8000376:	e022      	b.n	80003be <Disable_Nvic+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <Disable_Nvic+0xc4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <Disable_Nvic+0xc4>)
 800037e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000382:	6013      	str	r3, [r2, #0]
		break;
 8000384:	e01b      	b.n	80003be <Disable_Nvic+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <Disable_Nvic+0xc4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <Disable_Nvic+0xc4>)
 800038c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000390:	6013      	str	r3, [r2, #0]
		break;
 8000392:	e014      	b.n	80003be <Disable_Nvic+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <Disable_Nvic+0xc4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <Disable_Nvic+0xc4>)
 800039a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800039e:	6013      	str	r3, [r2, #0]
		break;
 80003a0:	e00d      	b.n	80003be <Disable_Nvic+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <Disable_Nvic+0xc4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <Disable_Nvic+0xc4>)
 80003a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003ac:	6013      	str	r3, [r2, #0]
		break;
 80003ae:	e006      	b.n	80003be <Disable_Nvic+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <Disable_Nvic+0xc8>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a05      	ldr	r2, [pc, #20]	; (80003cc <Disable_Nvic+0xc8>)
 80003b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ba:	6013      	str	r3, [r2, #0]
		break;
 80003bc:	bf00      	nop
	}
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	e000e180 	.word	0xe000e180
 80003cc:	e000e184 	.word	0xe000e184

080003d0 <EXTI_Uptade>:

void EXTI_Uptade (EXTI_PinConfig* EXTI_Config)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    AFIO_t* AFIO_CNF = AFIO_BASE;
 80003d8:	4b6c      	ldr	r3, [pc, #432]	; (800058c <EXTI_Uptade+0x1bc>)
 80003da:	617b      	str	r3, [r7, #20]

	//1- Make GPIO Floating point
	GPIO_Config_t Pinconfig;
	Pinconfig.GPIO_PinNumber = EXTI_Config->EXTI_Pin.GPIO_Pin;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	891b      	ldrh	r3, [r3, #8]
 80003e0:	813b      	strh	r3, [r7, #8]
	Pinconfig.GPIO_MODE = GPIO_MODE_INPUT_Floating;
 80003e2:	2301      	movs	r3, #1
 80003e4:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT(EXTI_Config->EXTI_Pin.GPIO_Port, &Pinconfig);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	f107 0208 	add.w	r2, r7, #8
 80003ee:	4611      	mov	r1, r2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fa5a 	bl	80008aa <MCAL_GPIO_INIT>
	//============================================================

	//2- Update AFIO to route with EXTI Line
	uint32_t AFIO_EXTICR_Index = EXTI_Config->EXTI_Pin.EXTI_Iput_Line / 4;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	089b      	lsrs	r3, r3, #2
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	613b      	str	r3, [r7, #16]
	uint32_t AFIO_EXTICR_Postion = (EXTI_Config->EXTI_Pin.EXTI_Iput_Line % 4) * 4;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	f003 0303 	and.w	r3, r3, #3
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	60fb      	str	r3, [r7, #12]

	//Clear 4-Bits
	AFIO_CNF->EXTICR[AFIO_EXTICR_Index] &= ~(0x0f << AFIO_EXTICR_Postion);
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	693a      	ldr	r2, [r7, #16]
 8000410:	3202      	adds	r2, #2
 8000412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000416:	210f      	movs	r1, #15
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	fa01 f202 	lsl.w	r2, r1, r2
 800041e:	43d2      	mvns	r2, r2
 8000420:	ea03 0102 	and.w	r1, r3, r2
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	3202      	adds	r2, #2
 800042a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	AFIO_CNF->EXTICR[AFIO_EXTICR_Index] |= (AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) << AFIO_EXTICR_Postion);
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	693a      	ldr	r2, [r7, #16]
 8000432:	3202      	adds	r2, #2
 8000434:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4954      	ldr	r1, [pc, #336]	; (8000590 <EXTI_Uptade+0x1c0>)
 800043e:	428b      	cmp	r3, r1
 8000440:	d016      	beq.n	8000470 <EXTI_Uptade+0xa0>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	4953      	ldr	r1, [pc, #332]	; (8000594 <EXTI_Uptade+0x1c4>)
 8000448:	428b      	cmp	r3, r1
 800044a:	d00f      	beq.n	800046c <EXTI_Uptade+0x9c>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	4951      	ldr	r1, [pc, #324]	; (8000598 <EXTI_Uptade+0x1c8>)
 8000452:	428b      	cmp	r3, r1
 8000454:	d008      	beq.n	8000468 <EXTI_Uptade+0x98>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	4950      	ldr	r1, [pc, #320]	; (800059c <EXTI_Uptade+0x1cc>)
 800045c:	428b      	cmp	r3, r1
 800045e:	d101      	bne.n	8000464 <EXTI_Uptade+0x94>
 8000460:	2303      	movs	r3, #3
 8000462:	e006      	b.n	8000472 <EXTI_Uptade+0xa2>
 8000464:	2300      	movs	r3, #0
 8000466:	e004      	b.n	8000472 <EXTI_Uptade+0xa2>
 8000468:	2302      	movs	r3, #2
 800046a:	e002      	b.n	8000472 <EXTI_Uptade+0xa2>
 800046c:	2301      	movs	r3, #1
 800046e:	e000      	b.n	8000472 <EXTI_Uptade+0xa2>
 8000470:	2300      	movs	r3, #0
 8000472:	68f9      	ldr	r1, [r7, #12]
 8000474:	408b      	lsls	r3, r1
 8000476:	ea42 0103 	orr.w	r1, r2, r3
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	3202      	adds	r2, #2
 8000480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    //============================================================

	//3- Update Rising and Falling Trigger
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 8000484:	4b46      	ldr	r3, [pc, #280]	; (80005a0 <EXTI_Uptade+0x1d0>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	8812      	ldrh	r2, [r2, #0]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	43d2      	mvns	r2, r2
 8000494:	4611      	mov	r1, r2
 8000496:	4a42      	ldr	r2, [pc, #264]	; (80005a0 <EXTI_Uptade+0x1d0>)
 8000498:	400b      	ands	r3, r1
 800049a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 800049c:	4b40      	ldr	r3, [pc, #256]	; (80005a0 <EXTI_Uptade+0x1d0>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	8812      	ldrh	r2, [r2, #0]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	43d2      	mvns	r2, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a3c      	ldr	r2, [pc, #240]	; (80005a0 <EXTI_Uptade+0x1d0>)
 80004b0:	400b      	ands	r3, r1
 80004b2:	60d3      	str	r3, [r2, #12]

    /********************Set (Rising - Falling - both Together)*********************/
	if (EXTI_Config->Trigger == EXTI_Trigger_RISING)	//Case it is Rising trigger
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	7b1b      	ldrb	r3, [r3, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d10b      	bne.n	80004d4 <EXTI_Uptade+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 80004bc:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <EXTI_Uptade+0x1d0>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	8812      	ldrh	r2, [r2, #0]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a34      	ldr	r2, [pc, #208]	; (80005a0 <EXTI_Uptade+0x1d0>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6093      	str	r3, [r2, #8]
 80004d2:	e025      	b.n	8000520 <EXTI_Uptade+0x150>

	} else if (EXTI_Config->Trigger == EXTI_Trigger_FALLING)  //Case it is Falling trigger
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	7b1b      	ldrb	r3, [r3, #12]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d10b      	bne.n	80004f4 <EXTI_Uptade+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <EXTI_Uptade+0x1d0>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	8812      	ldrh	r2, [r2, #0]
 80004e4:	4611      	mov	r1, r2
 80004e6:	2201      	movs	r2, #1
 80004e8:	408a      	lsls	r2, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <EXTI_Uptade+0x1d0>)
 80004ee:	430b      	orrs	r3, r1
 80004f0:	60d3      	str	r3, [r2, #12]
 80004f2:	e015      	b.n	8000520 <EXTI_Uptade+0x150>

	} else
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 80004f4:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <EXTI_Uptade+0x1d0>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	8812      	ldrh	r2, [r2, #0]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <EXTI_Uptade+0x1d0>)
 8000506:	430b      	orrs	r3, r1
 8000508:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <EXTI_Uptade+0x1d0>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	8812      	ldrh	r2, [r2, #0]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	4611      	mov	r1, r2
 800051a:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <EXTI_Uptade+0x1d0>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
	}
	//============================================================

	//4- Update IRQ Handling Callback
	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_Iput_Line] = EXTI_Config->P_IRQ_CallBack;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	691b      	ldr	r3, [r3, #16]
 800052a:	4a1e      	ldr	r2, [pc, #120]	; (80005a4 <EXTI_Uptade+0x1d4>)
 800052c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//============================================================

	//5- Update  Enable or disable IRQ
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7b5b      	ldrb	r3, [r3, #13]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d110      	bne.n	800055a <EXTI_Uptade+0x18a>
	{
		//Enable Interrupt Mask Register
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <EXTI_Uptade+0x1d0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	8812      	ldrh	r2, [r2, #0]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <EXTI_Uptade+0x1d0>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6013      	str	r3, [r2, #0]

		//Enable Corresponding  IRQ for Line
		Enable_Nvic(EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe70 	bl	8000238 <Enable_Nvic>
		//Disable Corresponding  IRQ for Line
		Disable_Nvic(EXTI_Config->EXTI_Pin.EXTI_Iput_Line);

	}

}
 8000558:	e014      	b.n	8000584 <EXTI_Uptade+0x1b4>
	} else if (EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	7b5b      	ldrb	r3, [r3, #13]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d110      	bne.n	8000584 <EXTI_Uptade+0x1b4>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <EXTI_Uptade+0x1d0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	8812      	ldrh	r2, [r2, #0]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	43d2      	mvns	r2, r2
 8000572:	4611      	mov	r1, r2
 8000574:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <EXTI_Uptade+0x1d0>)
 8000576:	400b      	ands	r3, r1
 8000578:	6013      	str	r3, [r2, #0]
		Disable_Nvic(EXTI_Config->EXTI_Pin.EXTI_Iput_Line);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fec0 	bl	8000304 <Disable_Nvic>
}
 8000584:	bf00      	nop
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010000 	.word	0x40010000
 8000590:	40010800 	.word	0x40010800
 8000594:	40010c00 	.word	0x40010c00
 8000598:	40011000 	.word	0x40011000
 800059c:	40011400 	.word	0x40011400
 80005a0:	40010400 	.word	0x40010400
 80005a4:	2000001c 	.word	0x2000001c

080005a8 <MCAL_EXTI_GPIO_Init>:
 * @param [in] 		-pointer to structure that  include pin config
 * @retval 			-None
 * Note             -None
 */
void  MCAL_EXTI_GPIO_Init (EXTI_PinConfig* EXTI_Config)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	EXTI_Uptade (EXTI_Config);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ff0d 	bl	80003d0 <EXTI_Uptade>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <EXTI0_IRQHandler>:
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*
//             Interrupt Handler
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*

void EXTI0_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<0);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <EXTI0_IRQHandler+0x1c>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <EXTI0_IRQHandler+0x1c>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[0]();
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <EXTI0_IRQHandler+0x20>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4798      	blx	r3

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010400 	.word	0x40010400
 80005e0:	2000001c 	.word	0x2000001c

080005e4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<1);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <EXTI1_IRQHandler+0x1c>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <EXTI1_IRQHandler+0x1c>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[1]();
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <EXTI1_IRQHandler+0x20>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	4798      	blx	r3
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010400 	.word	0x40010400
 8000604:	2000001c 	.word	0x2000001c

08000608 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<2);
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI2_IRQHandler+0x1c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI2_IRQHandler+0x1c>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[2]();
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <EXTI2_IRQHandler+0x20>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	4798      	blx	r3
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400
 8000628:	2000001c 	.word	0x2000001c

0800062c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<3);
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <EXTI3_IRQHandler+0x1c>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <EXTI3_IRQHandler+0x1c>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[3]();
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <EXTI3_IRQHandler+0x20>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4798      	blx	r3

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010400 	.word	0x40010400
 800064c:	2000001c 	.word	0x2000001c

08000650 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	//Clearing PR register
	EXTI->PR |= (1<<4);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <EXTI4_IRQHandler+0x1c>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <EXTI4_IRQHandler+0x1c>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[4]();
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <EXTI4_IRQHandler+0x20>)
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	4798      	blx	r3
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010400 	.word	0x40010400
 8000670:	2000001c 	.word	0x2000001c

08000674 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CallBack[5]();}
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <EXTI9_5_IRQHandler+0x22>
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	6153      	str	r3, [r2, #20]
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CallBack[6]();}
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d008      	beq.n	80006b4 <EXTI9_5_IRQHandler+0x40>
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CallBack[7]();}
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <EXTI9_5_IRQHandler+0x5e>
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a13      	ldr	r2, [pc, #76]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ca:	6153      	str	r3, [r2, #20]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CallBack[8]();}
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <EXTI9_5_IRQHandler+0x7c>
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 80006ec:	6a1b      	ldr	r3, [r3, #32]
 80006ee:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CallBack[9]();}
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <EXTI9_5_IRQHandler+0x9a>
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <EXTI9_5_IRQHandler+0xa0>)
 8000702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000706:	6153      	str	r3, [r2, #20]
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <EXTI9_5_IRQHandler+0xa4>)
 800070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070c:	4798      	blx	r3
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40010400 	.word	0x40010400
 8000718:	2000001c 	.word	0x2000001c

0800071c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CallBack[10]();}
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <EXTI15_10_IRQHandler+0x22>
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a29      	ldr	r2, [pc, #164]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000736:	6153      	str	r3, [r2, #20]
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 800073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CallBack[11]();}
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <EXTI15_10_IRQHandler+0x40>
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 8000758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CallBack[12]();}
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <EXTI15_10_IRQHandler+0x5e>
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800076e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000772:	6153      	str	r3, [r2, #20]
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CallBack[13]();}
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d008      	beq.n	8000798 <EXTI15_10_IRQHandler+0x7c>
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800078c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 8000794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000796:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CallBack[14]();}
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d008      	beq.n	80007b6 <EXTI15_10_IRQHandler+0x9a>
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6153      	str	r3, [r2, #20]
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 80007b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CallBack[15]();}
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d008      	beq.n	80007d4 <EXTI15_10_IRQHandler+0xb8>
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <EXTI15_10_IRQHandler+0xbc>)
 80007c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b03      	ldr	r3, [pc, #12]	; (80007dc <EXTI15_10_IRQHandler+0xc0>)
 80007d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007d2:	4798      	blx	r3

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40010400 	.word	0x40010400
 80007dc:	2000001c 	.word	0x2000001c

080007e0 <Get_Pin_Bit_Position>:
	GPIOX->ODR |= (uint32_t)(Portx_Val);
}


uint8_t Get_Pin_Bit_Position(uint16_t PinNumber)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	2b08      	cmp	r3, #8
 80007ee:	d01a      	beq.n	8000826 <Get_Pin_Bit_Position+0x46>
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	dc06      	bgt.n	8000802 <Get_Pin_Bit_Position+0x22>
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d012      	beq.n	800081e <Get_Pin_Bit_Position+0x3e>
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d012      	beq.n	8000822 <Get_Pin_Bit_Position+0x42>
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d00c      	beq.n	800081a <Get_Pin_Bit_Position+0x3a>
 8000800:	e01b      	b.n	800083a <Get_Pin_Bit_Position+0x5a>
 8000802:	2b20      	cmp	r3, #32
 8000804:	d013      	beq.n	800082e <Get_Pin_Bit_Position+0x4e>
 8000806:	2b20      	cmp	r3, #32
 8000808:	dc02      	bgt.n	8000810 <Get_Pin_Bit_Position+0x30>
 800080a:	2b10      	cmp	r3, #16
 800080c:	d00d      	beq.n	800082a <Get_Pin_Bit_Position+0x4a>
 800080e:	e014      	b.n	800083a <Get_Pin_Bit_Position+0x5a>
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	d00e      	beq.n	8000832 <Get_Pin_Bit_Position+0x52>
 8000814:	2b80      	cmp	r3, #128	; 0x80
 8000816:	d00e      	beq.n	8000836 <Get_Pin_Bit_Position+0x56>
 8000818:	e00f      	b.n	800083a <Get_Pin_Bit_Position+0x5a>
	{
	case GPIO_PIN_0:
		return 0;
 800081a:	2300      	movs	r3, #0
 800081c:	e040      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_1:
		return 4;
 800081e:	2304      	movs	r3, #4
 8000820:	e03e      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_2:
		return 8;
 8000822:	2308      	movs	r3, #8
 8000824:	e03c      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_3:
		return 12;
 8000826:	230c      	movs	r3, #12
 8000828:	e03a      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_4:
		return 16;
 800082a:	2310      	movs	r3, #16
 800082c:	e038      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_5:
		return 20;
 800082e:	2314      	movs	r3, #20
 8000830:	e036      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_6:
		return 24;
 8000832:	2318      	movs	r3, #24
 8000834:	e034      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_7:
		return 28;
 8000836:	231c      	movs	r3, #28
 8000838:	e032      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	}
	switch (PinNumber)
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000840:	d023      	beq.n	800088a <Get_Pin_Bit_Position+0xaa>
 8000842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000846:	dc09      	bgt.n	800085c <Get_Pin_Bit_Position+0x7c>
 8000848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800084c:	d019      	beq.n	8000882 <Get_Pin_Bit_Position+0xa2>
 800084e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000852:	d018      	beq.n	8000886 <Get_Pin_Bit_Position+0xa6>
 8000854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000858:	d011      	beq.n	800087e <Get_Pin_Bit_Position+0x9e>
 800085a:	e020      	b.n	800089e <Get_Pin_Bit_Position+0xbe>
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	d017      	beq.n	8000892 <Get_Pin_Bit_Position+0xb2>
 8000862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000866:	dc03      	bgt.n	8000870 <Get_Pin_Bit_Position+0x90>
 8000868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800086c:	d00f      	beq.n	800088e <Get_Pin_Bit_Position+0xae>
 800086e:	e016      	b.n	800089e <Get_Pin_Bit_Position+0xbe>
 8000870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000874:	d00f      	beq.n	8000896 <Get_Pin_Bit_Position+0xb6>
 8000876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800087a:	d00e      	beq.n	800089a <Get_Pin_Bit_Position+0xba>
 800087c:	e00f      	b.n	800089e <Get_Pin_Bit_Position+0xbe>
	{
	case GPIO_PIN_8:
		return 0;
 800087e:	2300      	movs	r3, #0
 8000880:	e00e      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_9:
		return 4;
 8000882:	2304      	movs	r3, #4
 8000884:	e00c      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_10:
		return 8;
 8000886:	2308      	movs	r3, #8
 8000888:	e00a      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_11:
		return 12;
 800088a:	230c      	movs	r3, #12
 800088c:	e008      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_12:
		return 16;
 800088e:	2310      	movs	r3, #16
 8000890:	e006      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_13:
		return 20;
 8000892:	2314      	movs	r3, #20
 8000894:	e004      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_14:
		return 24;
 8000896:	2318      	movs	r3, #24
 8000898:	e002      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_15:
		return 28;
 800089a:	231c      	movs	r3, #28
 800089c:	e000      	b.n	80008a0 <Get_Pin_Bit_Position+0xc0>
	}
	return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <MCAL_GPIO_INIT>:
 * @param [in] 		-pointer to structure that  include pin config
 * @retval 			-None
 * Note             -None
 */
void MCAL_GPIO_INIT(GPIO_t* GPIOX, GPIO_Config_t* PinConfig )
{
 80008aa:	b590      	push	{r4, r7, lr}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
	//Port Configuration register low (GPIOx_CRL) Configure PINS From 0 --> 7
	//Port Configuration register High (GPIOx_CRH) Configure PINS From 8 --> 15
	volatile uint32_t* RegisterConfig = (void*)0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
	uint8_t Config = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]
	//Pin is is in Register CRL or CRH
	RegisterConfig = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	2bff      	cmp	r3, #255	; 0xff
 80008c2:	d801      	bhi.n	80008c8 <MCAL_GPIO_INIT+0x1e>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	e001      	b.n	80008cc <MCAL_GPIO_INIT+0x22>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3304      	adds	r3, #4
 80008cc:	60bb      	str	r3, [r7, #8]

	//Clear CNFX[1:0] MODEX[1:0]
	*RegisterConfig &= ~(0xf << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff84 	bl	80007e0 <Get_Pin_Bit_Position>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	4093      	lsls	r3, r2
 80008e0:	43da      	mvns	r2, r3
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	401a      	ands	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	601a      	str	r2, [r3, #0]

	//Is pin output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	789b      	ldrb	r3, [r3, #2]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d00b      	beq.n	800090c <MCAL_GPIO_INIT+0x62>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	2b06      	cmp	r3, #6
 80008fa:	d007      	beq.n	800090c <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000900:	2b05      	cmp	r3, #5
 8000902:	d003      	beq.n	800090c <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	2b04      	cmp	r3, #4
 800090a:	d10b      	bne.n	8000924 <MCAL_GPIO_INIT+0x7a>
	{
		//Set CNFX[1:0] MODEX[1:0]
		Config = ( ((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_SPEED) );
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	3b04      	subs	r3, #4
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	b25a      	sxtb	r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	78db      	ldrb	r3, [r3, #3]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b25b      	sxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e029      	b.n	8000978 <MCAL_GPIO_INIT+0xce>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_Analog || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_Floating )
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <MCAL_GPIO_INIT+0x8a>
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d104      	bne.n	800093e <MCAL_GPIO_INIT+0x94>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config = ( (PinConfig->GPIO_MODE) << 2);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e01c      	b.n	8000978 <MCAL_GPIO_INIT+0xce>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF_OD)//Consider it as input floating
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	2b08      	cmp	r3, #8
 8000944:	d104      	bne.n	8000950 <MCAL_GPIO_INIT+0xa6>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config = ( (PinConfig->GPIO_MODE) << 2);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	789b      	ldrb	r3, [r3, #2]
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e013      	b.n	8000978 <MCAL_GPIO_INIT+0xce>
		}
		else //You deal with pull-up & pull-down
		{
			Config = (GPIO_MODE_INPUT_PU << 2);
 8000950:	2308      	movs	r3, #8
 8000952:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d105      	bne.n	8000968 <MCAL_GPIO_INIT+0xbe>
			{
				//Set ODR Register to make it pull-up
				GPIOX->ODR = PinConfig->GPIO_PinNumber;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	e007      	b.n	8000978 <MCAL_GPIO_INIT+0xce>
			}
			else
			{
				//Set ODR Register to make it pull-down
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	43d2      	mvns	r2, r2
 8000972:	401a      	ands	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	60da      	str	r2, [r3, #12]
			}
		}
	}
    *RegisterConfig |= ( (Config) << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber) );
 8000978:	7bfc      	ldrb	r4, [r7, #15]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff2e 	bl	80007e0 <Get_Pin_Bit_Position>
 8000984:	4603      	mov	r3, r0
 8000986:	fa04 f203 	lsl.w	r2, r4, r3
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	431a      	orrs	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}

0800099c <__libc_init_array>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	2500      	movs	r5, #0
 80009a0:	4e0c      	ldr	r6, [pc, #48]	; (80009d4 <__libc_init_array+0x38>)
 80009a2:	4c0d      	ldr	r4, [pc, #52]	; (80009d8 <__libc_init_array+0x3c>)
 80009a4:	1ba4      	subs	r4, r4, r6
 80009a6:	10a4      	asrs	r4, r4, #2
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	d109      	bne.n	80009c0 <__libc_init_array+0x24>
 80009ac:	f000 f81a 	bl	80009e4 <_init>
 80009b0:	2500      	movs	r5, #0
 80009b2:	4e0a      	ldr	r6, [pc, #40]	; (80009dc <__libc_init_array+0x40>)
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <__libc_init_array+0x44>)
 80009b6:	1ba4      	subs	r4, r4, r6
 80009b8:	10a4      	asrs	r4, r4, #2
 80009ba:	42a5      	cmp	r5, r4
 80009bc:	d105      	bne.n	80009ca <__libc_init_array+0x2e>
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009c4:	4798      	blx	r3
 80009c6:	3501      	adds	r5, #1
 80009c8:	e7ee      	b.n	80009a8 <__libc_init_array+0xc>
 80009ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ce:	4798      	blx	r3
 80009d0:	3501      	adds	r5, #1
 80009d2:	e7f2      	b.n	80009ba <__libc_init_array+0x1e>
 80009d4:	08000a08 	.word	0x08000a08
 80009d8:	08000a08 	.word	0x08000a08
 80009dc:	08000a08 	.word	0x08000a08
 80009e0:	08000a0c 	.word	0x08000a0c

080009e4 <_init>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	bf00      	nop
 80009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ea:	bc08      	pop	{r3}
 80009ec:	469e      	mov	lr, r3
 80009ee:	4770      	bx	lr

080009f0 <_fini>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	bf00      	nop
 80009f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f6:	bc08      	pop	{r3}
 80009f8:	469e      	mov	lr, r3
 80009fa:	4770      	bx	lr
