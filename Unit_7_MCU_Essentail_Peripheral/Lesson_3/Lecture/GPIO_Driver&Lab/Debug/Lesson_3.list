
Lesson_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000044c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000588  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000588  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000716  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000255  00000000  00000000  00020743  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  00020998  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00020de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00020ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000010e5  00000000  00000000  00020f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000009c9  00000000  00000000  00022025  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000042b5  00000000  00000000  000229ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00026ca3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  00026d20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000564 	.word	0x08000564

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000564 	.word	0x08000564

08000170 <Clock_Init>:
RCC_t*  RCC = RCC_Address;

/********************Function definition*************************/
//==========Clock_Init
 void Clock_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable GPIOA Clock
	E_GPIOA_CLK();
 8000174:	4b09      	ldr	r3, [pc, #36]	; (800019c <Clock_Init+0x2c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	699a      	ldr	r2, [r3, #24]
 800017a:	4b08      	ldr	r3, [pc, #32]	; (800019c <Clock_Init+0x2c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f042 0204 	orr.w	r2, r2, #4
 8000182:	619a      	str	r2, [r3, #24]
	//Enable GPIOA Clock
	E_GPIOB_CLK();
 8000184:	4b05      	ldr	r3, [pc, #20]	; (800019c <Clock_Init+0x2c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	699a      	ldr	r2, [r3, #24]
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <Clock_Init+0x2c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f042 0208 	orr.w	r2, r2, #8
 8000192:	619a      	str	r2, [r3, #24]
}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000000 	.word	0x20000000

080001a0 <GPIO_Init>:

//==========GPIO_Init
 void GPIO_Init()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	GPIO_Config_t PinConfig;

	/**********PinA1**********/
	//Choose Pin number
	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80001a6:	2302      	movs	r3, #2
 80001a8:	80bb      	strh	r3, [r7, #4]
	//Choose Pin Mode
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_Floating;
 80001aa:	2301      	movs	r3, #1
 80001ac:	71bb      	strb	r3, [r7, #6]
    MCAL_GPIO_INIT(GPIOA, &PinConfig);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4619      	mov	r1, r3
 80001b2:	4814      	ldr	r0, [pc, #80]	; (8000204 <GPIO_Init+0x64>)
 80001b4:	f000 f904 	bl	80003c0 <MCAL_GPIO_INIT>

	/**********PinB1**********/
    //Choose Pin number
    PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80001b8:	2302      	movs	r3, #2
 80001ba:	80bb      	strh	r3, [r7, #4]
    //Choose Pin Mode
    PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
    //Choose Clock speed
    PinConfig.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_INIT(GPIOB, &PinConfig);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	480f      	ldr	r0, [pc, #60]	; (8000208 <GPIO_Init+0x68>)
 80001ca:	f000 f8f9 	bl	80003c0 <MCAL_GPIO_INIT>

	/**********PinA13**********/
	//Choose Pin number
	PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d2:	80bb      	strh	r3, [r7, #4]
	//Choose Pin Mode
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_Floating;
 80001d4:	2301      	movs	r3, #1
 80001d6:	71bb      	strb	r3, [r7, #6]
    MCAL_GPIO_INIT(GPIOA, &PinConfig);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	4619      	mov	r1, r3
 80001dc:	4809      	ldr	r0, [pc, #36]	; (8000204 <GPIO_Init+0x64>)
 80001de:	f000 f8ef 	bl	80003c0 <MCAL_GPIO_INIT>

	/**********PinB13**********/
    //Choose Pin number
    PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e6:	80bb      	strh	r3, [r7, #4]
    //Choose Pin Mode
    PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e8:	2304      	movs	r3, #4
 80001ea:	71bb      	strb	r3, [r7, #6]
    //Choose Clock speed
    PinConfig.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001ec:	2301      	movs	r3, #1
 80001ee:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_INIT(GPIOB, &PinConfig);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4619      	mov	r1, r3
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <GPIO_Init+0x68>)
 80001f6:	f000 f8e3 	bl	80003c0 <MCAL_GPIO_INIT>

 }
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40010800 	.word	0x40010800
 8000208:	40010c00 	.word	0x40010c00

0800020c <__delay__>:

//=======__delay__ Function
void __delay__(uint32_t Time )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for(i = 0;i < 255;i++)
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	e00b      	b.n	8000232 <__delay__+0x26>
	for(j = 0;j < 255;j++);
 800021a:	2300      	movs	r3, #0
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	e002      	b.n	8000226 <__delay__+0x1a>
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	3301      	adds	r3, #1
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	2bfe      	cmp	r3, #254	; 0xfe
 800022a:	d9f9      	bls.n	8000220 <__delay__+0x14>
	for(i = 0;i < 255;i++)
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	3301      	adds	r3, #1
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2bfe      	cmp	r3, #254	; 0xfe
 8000236:	d9f0      	bls.n	800021a <__delay__+0xe>
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
	...

08000244 <main>:


//===========main Function
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	//Calling Init Function
	Clock_Init();
 8000248:	f7ff ff92 	bl	8000170 <Clock_Init>
	GPIO_Init();
 800024c:	f7ff ffa8 	bl	80001a0 <GPIO_Init>

	//Infinite Loop
	while (1)
	{
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == (uint8_t)0)
 8000250:	2102      	movs	r1, #2
 8000252:	4812      	ldr	r0, [pc, #72]	; (800029c <main+0x58>)
 8000254:	f000 f93d 	bl	80004d2 <MCAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d10c      	bne.n	8000278 <main+0x34>
		{
			//Toggle Led
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800025e:	2102      	movs	r1, #2
 8000260:	480f      	ldr	r0, [pc, #60]	; (80002a0 <main+0x5c>)
 8000262:	f000 f94a 	bl	80004fa <MCAL_GPIO_TogglePin>
			//========Single press
			while (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 8000266:	bf00      	nop
 8000268:	2102      	movs	r1, #2
 800026a:	480c      	ldr	r0, [pc, #48]	; (800029c <main+0x58>)
 800026c:	f000 f931 	bl	80004d2 <MCAL_GPIO_ReadPin>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f8      	beq.n	8000268 <main+0x24>
 8000276:	e00c      	b.n	8000292 <main+0x4e>
		}
		else if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == (uint8_t)1)
 8000278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <main+0x58>)
 800027e:	f000 f928 	bl	80004d2 <MCAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	d104      	bne.n	8000292 <main+0x4e>
		{
			//Toggle Led
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <main+0x5c>)
 800028e:	f000 f934 	bl	80004fa <MCAL_GPIO_TogglePin>
		}
		__delay__(1);
 8000292:	2001      	movs	r0, #1
 8000294:	f7ff ffba 	bl	800020c <__delay__>
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == (uint8_t)0)
 8000298:	e7da      	b.n	8000250 <main+0xc>
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	; (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 f923 	bl	800051c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ffb5 	bl	8000244 <main>

080002da <LoopForever>:

LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002e8:	08000584 	.word	0x08000584
  ldr r2, =_sbss
 80002ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f0:	20000020 	.word	0x20000020

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>

080002f6 <Get_Pin_Bit_Position>:
#include "Stm32f103x6.h"

/********************Function Definition***********************/

uint8_t Get_Pin_Bit_Position(uint16_t PinNumber)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4603      	mov	r3, r0
 80002fe:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	2b08      	cmp	r3, #8
 8000304:	d01a      	beq.n	800033c <Get_Pin_Bit_Position+0x46>
 8000306:	2b08      	cmp	r3, #8
 8000308:	dc06      	bgt.n	8000318 <Get_Pin_Bit_Position+0x22>
 800030a:	2b02      	cmp	r3, #2
 800030c:	d012      	beq.n	8000334 <Get_Pin_Bit_Position+0x3e>
 800030e:	2b04      	cmp	r3, #4
 8000310:	d012      	beq.n	8000338 <Get_Pin_Bit_Position+0x42>
 8000312:	2b01      	cmp	r3, #1
 8000314:	d00c      	beq.n	8000330 <Get_Pin_Bit_Position+0x3a>
 8000316:	e01b      	b.n	8000350 <Get_Pin_Bit_Position+0x5a>
 8000318:	2b20      	cmp	r3, #32
 800031a:	d013      	beq.n	8000344 <Get_Pin_Bit_Position+0x4e>
 800031c:	2b20      	cmp	r3, #32
 800031e:	dc02      	bgt.n	8000326 <Get_Pin_Bit_Position+0x30>
 8000320:	2b10      	cmp	r3, #16
 8000322:	d00d      	beq.n	8000340 <Get_Pin_Bit_Position+0x4a>
 8000324:	e014      	b.n	8000350 <Get_Pin_Bit_Position+0x5a>
 8000326:	2b40      	cmp	r3, #64	; 0x40
 8000328:	d00e      	beq.n	8000348 <Get_Pin_Bit_Position+0x52>
 800032a:	2b80      	cmp	r3, #128	; 0x80
 800032c:	d00e      	beq.n	800034c <Get_Pin_Bit_Position+0x56>
 800032e:	e00f      	b.n	8000350 <Get_Pin_Bit_Position+0x5a>
	{
	case GPIO_PIN_0:
		return 0;
 8000330:	2300      	movs	r3, #0
 8000332:	e040      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_1:
		return 4;
 8000334:	2304      	movs	r3, #4
 8000336:	e03e      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_2:
		return 8;
 8000338:	2308      	movs	r3, #8
 800033a:	e03c      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_3:
		return 12;
 800033c:	230c      	movs	r3, #12
 800033e:	e03a      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_4:
		return 16;
 8000340:	2310      	movs	r3, #16
 8000342:	e038      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_5:
		return 20;
 8000344:	2314      	movs	r3, #20
 8000346:	e036      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_6:
		return 24;
 8000348:	2318      	movs	r3, #24
 800034a:	e034      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_7:
		return 28;
 800034c:	231c      	movs	r3, #28
 800034e:	e032      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	}
	switch (PinNumber)
 8000350:	88fb      	ldrh	r3, [r7, #6]
 8000352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000356:	d023      	beq.n	80003a0 <Get_Pin_Bit_Position+0xaa>
 8000358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800035c:	dc09      	bgt.n	8000372 <Get_Pin_Bit_Position+0x7c>
 800035e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000362:	d019      	beq.n	8000398 <Get_Pin_Bit_Position+0xa2>
 8000364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000368:	d018      	beq.n	800039c <Get_Pin_Bit_Position+0xa6>
 800036a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800036e:	d011      	beq.n	8000394 <Get_Pin_Bit_Position+0x9e>
 8000370:	e020      	b.n	80003b4 <Get_Pin_Bit_Position+0xbe>
 8000372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000376:	d017      	beq.n	80003a8 <Get_Pin_Bit_Position+0xb2>
 8000378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800037c:	dc03      	bgt.n	8000386 <Get_Pin_Bit_Position+0x90>
 800037e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000382:	d00f      	beq.n	80003a4 <Get_Pin_Bit_Position+0xae>
 8000384:	e016      	b.n	80003b4 <Get_Pin_Bit_Position+0xbe>
 8000386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800038a:	d00f      	beq.n	80003ac <Get_Pin_Bit_Position+0xb6>
 800038c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000390:	d00e      	beq.n	80003b0 <Get_Pin_Bit_Position+0xba>
 8000392:	e00f      	b.n	80003b4 <Get_Pin_Bit_Position+0xbe>
	{
	case GPIO_PIN_8:
		return 0;
 8000394:	2300      	movs	r3, #0
 8000396:	e00e      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_9:
		return 4;
 8000398:	2304      	movs	r3, #4
 800039a:	e00c      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_10:
		return 8;
 800039c:	2308      	movs	r3, #8
 800039e:	e00a      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_11:
		return 12;
 80003a0:	230c      	movs	r3, #12
 80003a2:	e008      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_12:
		return 16;
 80003a4:	2310      	movs	r3, #16
 80003a6:	e006      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_13:
		return 20;
 80003a8:	2314      	movs	r3, #20
 80003aa:	e004      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_14:
		return 24;
 80003ac:	2318      	movs	r3, #24
 80003ae:	e002      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_15:
		return 28;
 80003b0:	231c      	movs	r3, #28
 80003b2:	e000      	b.n	80003b6 <Get_Pin_Bit_Position+0xc0>
	}
	return 0;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <MCAL_GPIO_INIT>:
 * @param [in] 		-pointer to structure that  include pin config
 * @retval 			-None
 * Note             -None
 */
void MCAL_GPIO_INIT(GPIO_t* GPIOX, GPIO_Config_t* PinConfig )
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	//Port Configuration register low (GPIOx_CRL) Configure PINS From 0 --> 7
	//Port Configuration register High (GPIOx_CRH) Configure PINS From 8 --> 15
	volatile uint32_t* RegisterConfig = (void*)0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
	uint8_t Config = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	73fb      	strb	r3, [r7, #15]
	//Pin is is in Register CRL or CRH
	RegisterConfig = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	881b      	ldrh	r3, [r3, #0]
 80003d6:	2bff      	cmp	r3, #255	; 0xff
 80003d8:	d801      	bhi.n	80003de <MCAL_GPIO_INIT+0x1e>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	e001      	b.n	80003e2 <MCAL_GPIO_INIT+0x22>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3304      	adds	r3, #4
 80003e2:	60bb      	str	r3, [r7, #8]

	//Clear CNFX[1:0] MODEX[1:0]
	*RegisterConfig &= ~(0xf << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber));
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff84 	bl	80002f6 <Get_Pin_Bit_Position>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	230f      	movs	r3, #15
 80003f4:	4093      	lsls	r3, r2
 80003f6:	43da      	mvns	r2, r3
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	401a      	ands	r2, r3
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	601a      	str	r2, [r3, #0]

	//Is pin output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	2b07      	cmp	r3, #7
 8000408:	d00b      	beq.n	8000422 <MCAL_GPIO_INIT+0x62>
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	789b      	ldrb	r3, [r3, #2]
 800040e:	2b06      	cmp	r3, #6
 8000410:	d007      	beq.n	8000422 <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000416:	2b05      	cmp	r3, #5
 8000418:	d003      	beq.n	8000422 <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	789b      	ldrb	r3, [r3, #2]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d10f      	bne.n	8000442 <MCAL_GPIO_INIT+0x82>
	{
		//Set CNFX[1:0] MODEX[1:0]
		Config |= ( ((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_SPEED) );
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	789b      	ldrb	r3, [r3, #2]
 8000426:	3b04      	subs	r3, #4
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	b25a      	sxtb	r2, r3
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	b25b      	sxtb	r3, r3
 8000432:	4313      	orrs	r3, r2
 8000434:	b25a      	sxtb	r2, r3
 8000436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043a:	4313      	orrs	r3, r2
 800043c:	b25b      	sxtb	r3, r3
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e037      	b.n	80004b2 <MCAL_GPIO_INIT+0xf2>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_Analog || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_Floating )
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d003      	beq.n	8000452 <MCAL_GPIO_INIT+0x92>
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d109      	bne.n	8000466 <MCAL_GPIO_INIT+0xa6>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config |= ( (PinConfig->GPIO_MODE) << 2);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	b25a      	sxtb	r2, r3
 800045a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800045e:	4313      	orrs	r3, r2
 8000460:	b25b      	sxtb	r3, r3
 8000462:	73fb      	strb	r3, [r7, #15]
 8000464:	e025      	b.n	80004b2 <MCAL_GPIO_INIT+0xf2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF_OD)//Consider it as input floating
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	789b      	ldrb	r3, [r3, #2]
 800046a:	2b08      	cmp	r3, #8
 800046c:	d109      	bne.n	8000482 <MCAL_GPIO_INIT+0xc2>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config |= ( (PinConfig->GPIO_MODE) << 2);
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	789b      	ldrb	r3, [r3, #2]
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	b25a      	sxtb	r2, r3
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4313      	orrs	r3, r2
 800047c:	b25b      	sxtb	r3, r3
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e017      	b.n	80004b2 <MCAL_GPIO_INIT+0xf2>
		}
		else //You deal with pull-up & pull-down
		{
			Config |= (GPIO_MODE_INPUT_PU << 2);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	f043 0308 	orr.w	r3, r3, #8
 8000488:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	789b      	ldrb	r3, [r3, #2]
 800048e:	2b02      	cmp	r3, #2
 8000490:	d107      	bne.n	80004a2 <MCAL_GPIO_INIT+0xe2>
			{
				//Set ODR Register to make it pull-up
				GPIOX->ODR |= PinConfig->GPIO_PinNumber;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	8812      	ldrh	r2, [r2, #0]
 800049a:	431a      	orrs	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	e007      	b.n	80004b2 <MCAL_GPIO_INIT+0xf2>
			}
			else
			{
				//Set ODR Register to make it pull-down
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	8812      	ldrh	r2, [r2, #0]
 80004aa:	43d2      	mvns	r2, r2
 80004ac:	401a      	ands	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	60da      	str	r2, [r3, #12]
			}
		}
	}
    *RegisterConfig = ( (Config) << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber) );
 80004b2:	7bfc      	ldrb	r4, [r7, #15]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff1c 	bl	80002f6 <Get_Pin_Bit_Position>
 80004be:	4603      	mov	r3, r0
 80004c0:	fa04 f303 	lsl.w	r3, r4, r3
 80004c4:	461a      	mov	r2, r3
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd90      	pop	{r4, r7, pc}

080004d2 <MCAL_GPIO_ReadPin>:
 * @param [in] 		-Pin number
 * @retval 			-Return (High or Low)
 * Note             -None
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_t* GPIOX, uint16_t PinNumber)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
 80004da:	460b      	mov	r3, r1
 80004dc:	807b      	strh	r3, [r7, #2]
	if( ((GPIOX->IDR & PinNumber) != LOW) )
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689a      	ldr	r2, [r3, #8]
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	4013      	ands	r3, r2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MCAL_GPIO_ReadPin+0x1c>
	{
		return HIGH;
 80004ea:	2301      	movs	r3, #1
 80004ec:	e000      	b.n	80004f0 <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return LOW;
 80004ee:	2300      	movs	r3, #0
	}
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <MCAL_GPIO_TogglePin>:
 * @param [in] 		-Pin number
 * @retval 			-None
 * Note             -None
*/
void MCAL_GPIO_TogglePin(GPIO_t* GPIOX, uint16_t PinNumber)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR ^= PinNumber;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68da      	ldr	r2, [r3, #12]
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	405a      	eors	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	60da      	str	r2, [r3, #12]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <__libc_init_array>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2500      	movs	r5, #0
 8000520:	4e0c      	ldr	r6, [pc, #48]	; (8000554 <__libc_init_array+0x38>)
 8000522:	4c0d      	ldr	r4, [pc, #52]	; (8000558 <__libc_init_array+0x3c>)
 8000524:	1ba4      	subs	r4, r4, r6
 8000526:	10a4      	asrs	r4, r4, #2
 8000528:	42a5      	cmp	r5, r4
 800052a:	d109      	bne.n	8000540 <__libc_init_array+0x24>
 800052c:	f000 f81a 	bl	8000564 <_init>
 8000530:	2500      	movs	r5, #0
 8000532:	4e0a      	ldr	r6, [pc, #40]	; (800055c <__libc_init_array+0x40>)
 8000534:	4c0a      	ldr	r4, [pc, #40]	; (8000560 <__libc_init_array+0x44>)
 8000536:	1ba4      	subs	r4, r4, r6
 8000538:	10a4      	asrs	r4, r4, #2
 800053a:	42a5      	cmp	r5, r4
 800053c:	d105      	bne.n	800054a <__libc_init_array+0x2e>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000544:	4798      	blx	r3
 8000546:	3501      	adds	r5, #1
 8000548:	e7ee      	b.n	8000528 <__libc_init_array+0xc>
 800054a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800054e:	4798      	blx	r3
 8000550:	3501      	adds	r5, #1
 8000552:	e7f2      	b.n	800053a <__libc_init_array+0x1e>
 8000554:	0800057c 	.word	0x0800057c
 8000558:	0800057c 	.word	0x0800057c
 800055c:	0800057c 	.word	0x0800057c
 8000560:	08000580 	.word	0x08000580

08000564 <_init>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
